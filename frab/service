#!/usr/bin/python
import os
import sys
import time
import pytz
import json
from calendar import timegm
from datetime import datetime
from operator import itemgetter

from hosted import CONFIG, NODE
import importer

CONFIG.restart_on_update()

diff = datetime(2015,12,28, 11,45,00) - datetime.utcnow() 

d, m, y = CONFIG['day0'].split('.')
BASE_DAY = datetime(int(y), int(m), int(d))

def current_time():
    now = datetime.utcnow() # + diff
    timestamp = timegm(now.timetuple()) + now.microsecond / 1000000.
    return now, timestamp

def send_day(now, ts):
    now = now.replace(tzinfo=pytz.utc)
    now = now.astimezone(pytz.timezone(CONFIG['timezone']))
    now = now.replace(tzinfo=None)

    day = (now - BASE_DAY).days
    NODE.send('/day:%d' % day)

def main():
    while 1:
        now, ts = current_time()
        if now.year < 2000:
            print >>sys.stderr, "too soon"
            time.sleep(1)
            continue

        events = []
        for schedule in CONFIG['schedule_urls']:
            print >>sys.stderr, "fetching %s" % schedule['url']
            events.extend(importer.get_schedule(schedule['url'], schedule['group']))
            print >>sys.stderr, "done. now ", len(events)

        if not events:
            print >>sys.stderr, "no events" 
            time.sleep(60)
            continue

        events.sort(key=itemgetter('start_unix'))

        with file("schedule.json.new", "wb") as f:
            f.write(json.dumps([dict(
                duration = event['duration'],
                lang = event['lang'],
                place = event['place'],
                speakers = [s for s in event['speakers'] if s],
                link = event['link'],
                abstract = event['abstract'],
                start_str = event['start_str'],
                title = event['title'],
                group = event['group'],
                start_unix = event['start_unix'],
                end_unix = event['end_unix'],
                id = event['id'],
            ) for event in sorted(events, key=itemgetter('start_unix'))], 
                ensure_ascii=False,
                separators=(',',':')
            ).encode('utf8'))
        os.rename("schedule.json.new", "schedule.json")

        print >>sys.stderr, "updated schedule"

        deadline = time.time() + 60*10
        while time.time() < deadline:
            now, ts = current_time()
            send_day(now, ts)
            time.sleep(10)

if __name__ == "__main__":
    main()
